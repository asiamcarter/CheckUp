{"ast":null,"code":"import _classCallCheck from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asiacarter/workspace/checkup/src/components/notes/NewNoteForm.js\";\nimport React, { Component } from \"react\";\nimport DataManager from \"../../modules/DataManager\";\nimport ReactMicRecord from \"react-mic-record\"; // import Recorder from 'react-mp3-recorder'\n\nimport * as firebase from \"firebase\";\n\nvar NewNoteForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewNoteForm, _Component);\n\n  function NewNoteForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewNoteForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewNoteForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      userId: \"\",\n      doctorId: \"\",\n      time: \"\",\n      date: \"\",\n      reason: \"\",\n      note: \"\",\n      timestamp: \"\",\n      audio: {\n        uploadedFileName: \"\",\n        songDownloadURL: \"\"\n      },\n      photo: \"\",\n      record: false\n    };\n\n    _this.startRecording = function () {\n      _this.setState({\n        record: true\n      });\n    };\n\n    _this.stopRecording = function () {\n      _this.setState({\n        record: false\n      });\n    };\n\n    _this.onStop = function (recordedBlob) {\n      console.log('recordedBlob is: ', recordedBlob); // this.setState({\n      //     audio: recordedBlob\n      // })\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n\n      console.log(evt.target, evt.target.value);\n    };\n\n    _this.addNewNote = function (evt) {\n      evt.preventDefault();\n      var newNoteObject = {\n        userId: _this.state.userId,\n        doctorId: _this.state.doctorId,\n        time: _this.state.time,\n        date: _this.state.date,\n        reason: _this.state.reason,\n        note: _this.state.note,\n        timestamp: new Date(),\n        audio: _this.state.audio,\n        photo: _this.state.photo\n      };\n\n      _this.props.editAppointment(_this.props.match.params.id, newNoteObject).then(function () {\n        return _this.props.history.push(\"/appointments\");\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(NewNoteForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      DataManager.getById(this.props.match.params.id, \"appointments\").then(function (appointment) {\n        _this2.setState({\n          userId: appointment.userId,\n          doctorId: appointment.doctorId,\n          time: appointment.time,\n          date: appointment.date,\n          reason: appointment.reason,\n          note: appointment.note,\n          timestamp: appointment.timestamp,\n          audio: appointment.audio,\n          photo: appointment.photo\n        });\n      });\n    }\n  }, {\n    key: \"onData\",\n    value: function onData(recordedBlob) {\n      console.log('chunk of real-time data is: ', recordedBlob);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"NEW NOTE STATE:\", this.state);\n      return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"New Note\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Content\"), React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: this.addNewNote,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Add\"), React.createElement(\"input\", {\n        type: \"file\",\n        accept: \"audio/*\",\n        capture: true,\n        id: \"audio\",\n        onChange: function onChange(e) {\n          var file = e.target.files[0];\n          var fileName = file.name;\n          var uploadedSong = firebase.storage().ref(file.name);\n          var task = uploadedSong.put(file);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(\"audio\", {\n        id: \"player\",\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return NewNoteForm;\n}(Component);\n\nexport { NewNoteForm as default };","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/components/notes/NewNoteForm.js"],"names":["React","Component","DataManager","ReactMicRecord","firebase","NewNoteForm","state","userId","doctorId","time","date","reason","note","timestamp","audio","uploadedFileName","songDownloadURL","photo","record","startRecording","setState","stopRecording","onStop","recordedBlob","console","log","handleFieldChange","evt","stateToChange","target","id","value","addNewNote","preventDefault","newNoteObject","Date","props","editAppointment","match","params","then","history","push","getById","appointment","e","file","files","fileName","name","uploadedSong","storage","ref","task","put"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport DataManager from \"../../modules/DataManager\"\nimport ReactMicRecord from \"react-mic-record\"\n// import Recorder from 'react-mp3-recorder'\nimport * as firebase from \"firebase\"\n\n\nexport default class NewNoteForm extends Component {\n    state = {\n        userId: \"\",\n        doctorId: \"\",\n        time: \"\",\n        date: \"\",\n        reason: \"\",\n        note: \"\",\n        timestamp: \"\",\n        audio: {\n            uploadedFileName:\"\",\n            songDownloadURL: \"\"\n        },\n        photo: \"\",\n        record: false\n    }\n\n    componentDidMount() {\n        DataManager.getById(this.props.match.params.id, \"appointments\").then(appointment => {\n            this.setState({\n                userId: appointment.userId,\n                doctorId: appointment.doctorId,\n                time: appointment.time,\n                date: appointment.date,\n                reason: appointment.reason,\n                note: appointment.note,\n                timestamp: appointment.timestamp,\n                audio: appointment.audio,\n                photo: appointment.photo\n            })\n        })\n    }\n\n    startRecording = () => {\n        this.setState({\n            record: true\n        });\n    }\n\n    stopRecording = () => {\n        this.setState({\n            record: false\n        });\n    }\n\n    onData(recordedBlob) {\n        console.log('chunk of real-time data is: ', recordedBlob);\n    }\n\n    onStop = (recordedBlob) => {\n        console.log('recordedBlob is: ', recordedBlob);\n        // this.setState({\n        //     audio: recordedBlob\n        // })\n    }\n\n\n    handleFieldChange = evt => {\n        const stateToChange = {};\n        stateToChange[evt.target.id] = evt.target.value;\n        this.setState(stateToChange);\n        console.log(evt.target, evt.target.value)\n\n    }\n\n    addNewNote = evt => {\n        evt.preventDefault();\n        const newNoteObject = {\n            userId: this.state.userId,\n            doctorId: this.state.doctorId,\n            time: this.state.time,\n            date: this.state.date,\n            reason: this.state.reason,\n            note: this.state.note,\n            timestamp: new Date(),\n            audio: this.state.audio,\n            photo: this.state.photo\n        }\n        this.props.editAppointment(this.props.match.params.id, newNoteObject)\n            .then(() => this.props.history.push(\"/appointments\"))\n    }\n\n    render() {\n\n            console.log(\"NEW NOTE STATE:\", this.state)\n            return (\n                <>\n                    <h2>New Note</h2>\n                    <div>\n                        <label htmlFor=\"content\">Content</label>\n                        <input type=\"text\" required onChange={this.handleFieldChange} id=\"note\" />\n                        <button type=\"submit\" onClick={this.addNewNote} >Add</button>\n                        <input type=\"file\" accept=\"audio/*\" capture id=\"audio\"  onChange={(e)=> {\n                            let file= e.target.files[0];\n                            let fileName = file.name\n\n                            let uploadedSong = firebase.storage().ref(file.name)\n\n                            let task = uploadedSong.put(file)\n\n                          }}/>\n                            {/* // reader.readAsDataURL(file)\n                            // let player = document.getElementById('player');\n                            // player.src= URL.createObjectURL(file)\n                            // console.log(file)\n                            // this.setState({audio: file})\n                        }}/> */}\n                        <audio id=\"player\" controls></audio>\n                        {/* <ReactMicRecord\n                            record={this.state.record}\n                            className=\"sound-wave\"\n                            onStop={this.onStop}\n                            strokeColor=\"#000000\"\n                            backgroundColor=\"#ffffff\" />\n                        <button onClick={this.startRecording} type=\"button\">Start</button>\n                        <button onClick={this.stopRecording} value=\"audio\" type=\"button\">Stop</button> */}\n                        {/* <figure>\n                            <figcaption>Listen:</figcaption>\n                            <audio\n                                controls\n                                src={this.state.audio.blobURL}>\n                                Your browser does not support the\n                                <code>audio</code> element.\n                            </audio>\n                        </figure> */}\n                    </div>\n                </>\n            )\n        }\n    }"]},"metadata":{},"sourceType":"module"}