{"ast":null,"code":"var remoteURL = \"http://localhost:5002\";\nexport default {\n  getAll: function getAll(endpoint) {\n    return fetch(\"\".concat(remoteURL, \"/\").concat(endpoint)).then(function (r) {\n      return r.json();\n    });\n  },\n  getAllUserInfo: function getAllUserInfo() {\n    return fetch(\"\".concat(remoteURL, \"/users/?_embed=appointments&_embed=symptoms&_embed=medications\")).then(function (r) {\n      return r.json();\n    });\n  },\n  postUser: function postUser(newUser) {\n    return fetch(\"\".concat(remoteURL, \"/users\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newUser)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  postSymptom: function postSymptom(newSymptom) {\n    return fetch(\"\".concat(remoteURL, \"/symptoms\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newSymptom)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  postTrackedSymptom: function postTrackedSymptom(newTrackedSymptom) {\n    return fetch(\"\".concat(remoteURL, \"/trackedSymptoms\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTrackedSymptom)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  checkForUser: function checkForUser(email, password) {\n    return fetch(\"\".concat(remoteURL, \"/users?email=\").concat(email, \"&password=\").concat(password)).then(function (r) {\n      return r.json();\n    });\n  },\n  delete: function _delete(id, dataset) {\n    return fetch(\"\".concat(remoteURL, \"/\").concat(dataset, \"/\").concat(id), {\n      method: \"DELETE\"\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  postMedicaton: function postMedicaton(newMedication) {\n    return fetch(\"\".concat(remoteURL, \"/medications\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newMedication)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  putMedication: function putMedication(id, newObject) {\n    return fetch(\"\".concat(remoteURL, \"/medications/\").concat(id), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newObject)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  getById: function getById(id, dataset) {\n    return fetch(\"\".concat(remoteURL, \"/\").concat(dataset, \"/\").concat(id)).then(function (r) {\n      return r.json();\n    });\n  },\n  postAppointment: function postAppointment(newAppointment) {\n    return fetch(\"\".concat(remoteURL, \"/appointments\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newAppointment)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  getAllAptNotes: function getAllAptNotes() {\n    return fetch(\"\".concat(remoteURL, \"/appointments/?_embed=notes\")).then(function (r) {\n      return r.json();\n    });\n  },\n  putAppointment: function putAppointment(id, newObject) {\n    return fetch(\"\".concat(remoteURL, \"/appointments/\").concat(id), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newObject)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  getAptDoc: function getAptDoc() {\n    return fetch(\"\".concat(remoteURL, \"/appointments/?_expand=doctor\")).then(function (r) {\n      return r.json();\n    });\n  },\n  postNewDoctor: function postNewDoctor(newDocotor) {\n    return fetch(\"\".concat(remoteURL, \"/doctors\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newDocotor)\n    }).then(function (r) {\n      return r.json();\n    });\n  }\n};","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/modules/DataManager.js"],"names":["remoteURL","getAll","endpoint","fetch","then","r","json","getAllUserInfo","postUser","newUser","method","headers","body","JSON","stringify","postSymptom","newSymptom","postTrackedSymptom","newTrackedSymptom","checkForUser","email","password","delete","id","dataset","postMedicaton","newMedication","putMedication","newObject","getById","postAppointment","newAppointment","getAllAptNotes","putAppointment","getAptDoc","postNewDoctor","newDocotor"],"mappings":"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","sourcesContent":["const remoteURL = \"http://localhost:5002\"\n\nexport default {\n    getAll(endpoint) {\n        return fetch(`${remoteURL}/${endpoint}`).then(r => r.json())\n\n    },\n\n    getAllUserInfo() {\n        return fetch(`${remoteURL}/users/?_embed=appointments&_embed=symptoms&_embed=medications`).then(r=>r.json())\n    },\n\n    postUser(newUser) {\n        return fetch(`${remoteURL}/users`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newUser)\n        }).then(r => r.json())\n    },\n    postSymptom(newSymptom) {\n        return fetch(`${remoteURL}/symptoms`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newSymptom)\n        }).then(r => r.json())\n\n    },\n    postTrackedSymptom(newTrackedSymptom) {\n        return fetch(`${remoteURL}/trackedSymptoms`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newTrackedSymptom)\n        }).then(r=> r.json())\n    },\n\n    checkForUser(email, password) {\n        return fetch(`${remoteURL}/users?email=${email}&password=${password}`).then(r => r.json())\n    },\n\n    delete(id, dataset) {\n        return fetch (`${remoteURL}/${dataset}/${id}`, {\n            method: \"DELETE\"}).then(r => r.json())\n    },\n\n    postMedicaton(newMedication) {\n        return fetch(`${remoteURL}/medications`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newMedication)\n        }).then(r => r.json())\n\n    },\n\n    putMedication(id, newObject) {\n        return fetch (`${remoteURL}/medications/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newObject)\n        }).then(r => r.json())\n    },\n\n    getById(id, dataset) {\n        return fetch(`${remoteURL}/${dataset}/${id}`).then(r => r.json())\n    },\n\n    postAppointment(newAppointment) {\n        return fetch(`${remoteURL}/appointments`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newAppointment)\n        }).then(r => r.json())\n    },\n    getAllAptNotes() {\n        return fetch(`${remoteURL}/appointments/?_embed=notes`).then(r =>r.json())\n    },\n\n    putAppointment(id, newObject) {\n        return fetch (`${remoteURL}/appointments/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newObject)\n        }).then(r => r.json())\n    },\n\n    getAptDoc() {\n        return fetch(`${remoteURL}/appointments/?_expand=doctor`).then(r =>r.json())\n    },\n\n    postNewDoctor(newDocotor) {\n        return fetch(`${remoteURL}/doctors`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newDocotor)\n        }).then(r => r.json())\n\n    },\n\n    // getAppointmentNotes(appointmentId) {\n    //     return fetch(`${remoteURL}/appointments/${appointmentId}/?_embed=notes`).then(r=>r.json())\n    // },\n    // getAllAppointmentNotes() {\n    //     return fetch(`${remoteURL}/appointments/?_expand=note`).then(r=>r.json())\n    // },\n    // postNewNote(newNote) {\n    //     return fetch(`${remoteURL}/notes`, {\n    //         method: \"POST\",\n    //         headers: {\n    //             \"Content-Type\": \"application/json\"\n    //         },\n    //         body: JSON.stringify(newNote)\n    //     }).then(r => r.json())\n\n    // }\n}\n"]},"metadata":{},"sourceType":"module"}