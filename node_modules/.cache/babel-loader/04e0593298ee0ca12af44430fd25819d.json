{"ast":null,"code":"import _classCallCheck from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asiacarter/workspace/checkup/src/components/medications/MedicationCard.js\";\n//Component builds cards for each medication added to the medication list\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from 'reactstrap';\n\nvar MedicationCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MedicationCard, _Component);\n\n  function MedicationCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MedicationCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MedicationCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      textValue: \"Take Dose\",\n      buttonPressed: false\n    };\n\n    _this.takeDosePressed = function () {\n      var today = new Date();\n      var time = today.toLocaleTimeString('en-US');\n\n      _this.setState({\n        textValue: \"Taken at \".concat(time),\n        buttonPressed: true\n      });\n    };\n\n    _this.updateMeds = function () {\n      // let today = new Date()\n      //  let d = new Date();\n      // let day = d.getDate();\n      // let year = d.getFullYear();\n      // let month = (d.getMonth() + 1);\n      // let hours = (today.getHours()-12)\n      // let minutes = today.getMinutes()\n      var today = new Date();\n      var time = today.toLocaleTimeString();\n      time.toString();\n      var hours = today.getHours() - 12;\n      var minutes = today.getMinutes();\n      var minutes2 = today.getMinutes(); // console.log(\"TEST\",minutes2 + 2)\n\n      var testTime = \"\".concat(hours, \" : \").concat(minutes);\n      var testTime2 = \"\".concat(hours, \" : \").concat(minutes2);\n      var year = '2013';\n      var month = '04';\n      var day = '18';\n      var hour = '12';\n      var min = '35';\n      var reserv = new Date(year, month, day, hour, min);\n      console.log(\"TEST\", time); // if ( time < testTime2) {\n      // console.log(time)\n      // }\n    };\n\n    _this.showUsersMedications = function () {\n      console.log(_this.props.medication.userId, Number(sessionStorage.getItem(\"User\")));\n\n      if (_this.props.medication.userId === Number(sessionStorage.getItem(\"User\"))) {\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          key: _this.props.medication.id,\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"medication-name-and-edit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          className: \"card-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, _this.props.medication.name), React.createElement(Link, {\n          to: \"/meds/editmedication/\".concat(_this.props.medication.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, \"Edit\"), React.createElement(\"button\", {\n          type: \"button\",\n          onClick: function onClick() {\n            return _this.props.deleteMedication(_this.props.medication.id);\n          },\n          className: \"card-link\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, \"x\")), React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Quantity\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, _this.props.medication.quantity)), React.createElement(Button, {\n          type: \"button\",\n          color: _this.state.buttonPressed === true ? \"info\" : \"danger\",\n          id: \"take-dose-button\",\n          onClick: _this.takeDosePressed,\n          className: \"card-link\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, _this.state.textValue)));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MedicationCard, [{\n    key: \"render\",\n    value: function render() {\n      console.log(\"STATE\", this.state);\n      this.updateMeds();\n      return React.createElement(React.Fragment, null, this.showUsersMedications());\n    }\n  }]);\n\n  return MedicationCard;\n}(Component);\n\nexport { MedicationCard as default };","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/components/medications/MedicationCard.js"],"names":["React","Component","Link","Button","MedicationCard","state","textValue","buttonPressed","takeDosePressed","today","Date","time","toLocaleTimeString","setState","updateMeds","toString","hours","getHours","minutes","getMinutes","minutes2","testTime","testTime2","year","month","day","hour","min","reserv","console","log","showUsersMedications","props","medication","userId","Number","sessionStorage","getItem","id","name","deleteMedication","quantity"],"mappings":"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","sourcesContent":["//Component builds cards for each medication added to the medication list\nimport React, { Component } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Button } from 'reactstrap';\n\nexport default class MedicationCard extends Component {\n    state = {\n        textValue : \"Take Dose\",\n        buttonPressed: false\n    }\n\n    takeDosePressed = () => {\n\n        let today = new Date();\n        let time = today.toLocaleTimeString('en-US')\n        this.setState({\n            textValue: `Taken at ${time}`,\n            buttonPressed: true\n        })\n    }\n\n    updateMeds = () => {\n\n        // let today = new Date()\n        //  let d = new Date();\n        // let day = d.getDate();\n        // let year = d.getFullYear();\n        // let month = (d.getMonth() + 1);\n        // let hours = (today.getHours()-12)\n        // let minutes = today.getMinutes()\n\n        let today = new Date()\n        let time= today.toLocaleTimeString()\n        time.toString()\n        let hours = (today.getHours()-12)\n        let minutes = today.getMinutes()\n        let minutes2 = today.getMinutes()\n        // console.log(\"TEST\",minutes2 + 2)\n        let testTime = `${hours} : ${minutes}`\n        let testTime2= `${hours} : ${minutes2}`\n\n\n        var year = '2013';\n        var month = '04';\n        var day = '18';\n\n        var hour = '12';\n        var min = '35';\n\n        var reserv = new Date(year,month,day,hour,min)\n\n        console.log(\"TEST\", time)\n\n        // if ( time < testTime2) {\n        // console.log(time)\n        // }\n    }\n\n    showUsersMedications = () => {\n        console.log(this.props.medication.userId, Number(sessionStorage.getItem(\"User\")))\n        if (this.props.medication.userId === Number(sessionStorage.getItem(\"User\"))) {\n            return (\n                <>\n                    <div key={this.props.medication.id}\n                        className=\"card\">\n                        <div className=\"card-body\">\n                        <div className=\"medication-name-and-edit\">\n                            <h5 className=\"card-title\">\n                                {this.props.medication.name}\n                                </h5>\n                                <Link to={`/meds/editmedication/${this.props.medication.id}`}>Edit</Link>\n                                <button type=\"button\"  onClick={() => this.props.deleteMedication(this.props.medication.id)} className=\"card-link\" >\n                                    x\n                            </button>\n\n                            </div>\n                            {/* <h6>Date:</h6>\n                            <p>{this.props.medication.date}</p> */}\n                            {/* <h6>Time</h6>\n                            <p>{this.props.medication.time}</p> */}\n                            <h6>Quantity</h6>\n                            <p>{this.props.medication.quantity}</p>\n                            {/* <h6>Frequency</h6>\n                            <p>{this.props.medication.frequency}</p> */}\n                        </div>\n                        <Button type=\"button\" color={this.state.buttonPressed === true ? \"info\" : \"danger\" } id=\"take-dose-button\" onClick={ this.takeDosePressed} className=\"card-link\" >\n                                    {this.state.textValue}\n                            </Button>\n\n                    </div>\n                </>\n            )\n        }\n    }\n    render() {\n        console.log(\"STATE\",this.state)\n        this.updateMeds()\n        return (\n            <>\n                {this.showUsersMedications()}\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}