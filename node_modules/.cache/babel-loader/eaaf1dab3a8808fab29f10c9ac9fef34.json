{"ast":null,"code":"import _classCallCheck from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asiacarter/workspace/checkup/src/components/ApplicationViews.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./nav/NavBar\";\nimport { Route } from \"react-router-dom\"; // import { Redirect } from \"react-router-dom\"\n\nimport SymptomList from \"./symptoms/SymptomList\";\nimport Login from \"./login/Login\";\nimport Register from \"./login/Register\";\nimport DataManager from \"../modules/DataManager\"; // import TrackNavBar from \"./nav/TrackNavBar\"\n\nimport Homepage from \"./homepage/Homepage\";\nimport NewSymptomForm from \"./symptoms/NewSymptomForm\";\nimport MedicationList from \"./medications/MedicationList\";\nimport NewMedicationForm from \"./medications/NewMedicationForm\";\nimport EditMedicationForm from \"./medications/EditMedicationForm\";\n\nvar ApplicationViews =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ApplicationViews, _Component);\n\n  function ApplicationViews() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ApplicationViews);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ApplicationViews)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      users: [],\n      symptoms: [],\n      medications: [],\n      appointments: [],\n      notes: [],\n      doctors: []\n    };\n\n    _this.isAuthenticated = function () {\n      return sessionStorage.getItem(\"User\") !== null;\n    };\n\n    _this.addSymptom = function (newSymptom) {\n      return DataManager.postSymptom(newSymptom).then(function () {\n        DataManager.getAll(\"symptoms\").then(function (allSymptoms) {\n          return _this.setState({\n            symptoms: allSymptoms\n          });\n        });\n      });\n    };\n\n    _this.deleteSymptom = function (id) {\n      return DataManager.delete(id, \"symptoms\").then(function () {\n        DataManager.getAll(\"symptoms\").then(function (allSymptoms) {\n          _this.setState({\n            symptoms: allSymptoms\n          });\n        });\n      });\n    };\n\n    _this.addMedication = function (newMedication) {\n      return DataManager.postMedicaton(newMedication).then(function () {\n        DataManager.getAll(\"medications\").then(function (allMedications) {\n          return _this.setState({\n            medications: allMedications\n          });\n        });\n      });\n    };\n\n    _this.deleteMedication = function (id) {\n      return DataManager.delete(id, \"medications\").then(function () {\n        DataManager.getAll(\"medications\").then(function (allMedications) {\n          _this.setState({\n            medications: allMedications\n          });\n        });\n      });\n    };\n\n    _this.editMedication = function (id, newMedicationObject) {\n      return DataManager.putMedication(id, newMedicationObject).then(function () {\n        DataManager.getAll(\"medications\").then(function (allMedication) {\n          return _this.setState({\n            medications: allMedication\n          });\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ApplicationViews, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var newState = {};\n      DataManager.getAll(\"users\").then(function (allUsers) {\n        return newState.users = allUsers;\n      }).then(function () {\n        return DataManager.getAll(\"symptoms\");\n      }).then(function (allSymptoms) {\n        return newState.symptoms = allSymptoms;\n      }).then(function () {\n        return DataManager.getAll(\"medications\");\n      }).then(function (allMedications) {\n        var sortedMeds = allMedications.sort();\n        newState.medications = sortedMeds;\n      }).then(function () {\n        return DataManager.getAll(\"appointments\");\n      }).then(function (allAppointments) {\n        return newState.appointments = allAppointments;\n      }).then(function () {\n        return DataManager.getAll(\"notes\");\n      }).then(function (allNotes) {\n        return newState.notes = allNotes;\n      }).then(function () {\n        return DataManager.getAll(\"doctors\");\n      }).then(function (allDoctors) {\n        return newState.doctors = allDoctors;\n      }).then(function () {\n        return _this2.setState(newState);\n      }).then(function () {\n        console.log(\"COMPONENTDIDMOUNT:\", _this2.state);\n      });\n    } //authentication\n\n  }, {\n    key: \"showNav\",\n    value: function showNav() {\n      if (this.isAuthenticated()) {\n        return React.createElement(NavBar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        });\n      }\n    } //login/registration\n\n  }, {\n    key: \"registerUser\",\n    value: function registerUser(username, password) {\n      DataManager.getUsers(username, password);\n    }\n  }, {\n    key: \"getUsers\",\n    value: function getUsers() {\n      return DataManager.getAll(\"users\");\n    }\n  }, {\n    key: \"postUser\",\n    value: function postUser(newUser) {\n      return DataManager.postUser(newUser).then(function () {\n        return DataManager.getAll(\"users\");\n      });\n    }\n  }, {\n    key: \"checkForUser\",\n    value: function checkForUser(email, password) {\n      return DataManager.checkForUser(email, password);\n    } //symptoms\n\n  }, {\n    key: \"getAllSymptoms\",\n    value: function getAllSymptoms() {\n      DataManager.getAll(\"symptoms\");\n    } //medications\n\n  }, {\n    key: \"getAllMedications\",\n    value: function getAllMedications() {\n      DataManager.getAll(\"medications\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render(props) {\n          return React.createElement(Login, Object.assign({}, props, {\n            checkForUser: _this3.checkForUser,\n            users: _this3.state.users,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), this.showNav(), React.createElement(Route, {\n        exact: true,\n        path: \"/register\",\n        render: function render(props) {\n          return React.createElement(Register, Object.assign({}, props, {\n            getUsers: _this3.getUsers,\n            postUser: _this3.postUser,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/home\",\n        render: function render(props) {\n          return React.createElement(Homepage, Object.assign({}, props, {\n            users: _this3.state.users,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/track\",\n        render: function render(props) {\n          return React.createElement(SymptomList, Object.assign({}, props, {\n            symptoms: _this3.state.symptoms,\n            addSymptom: _this3.addSymptom,\n            deleteSymptom: _this3.deleteSymptom,\n            getAll: _this3.getAllSymptoms,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/symptoms/new\",\n        render: function render(props) {\n          return React.createElement(NewSymptomForm, Object.assign({}, props, {\n            symptoms: _this3.state.symptoms,\n            addSymptom: _this3.addSymptom,\n            getAll: _this3.getAllSymptoms,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/meds\",\n        render: function render(props) {\n          return React.createElement(MedicationList, Object.assign({}, props, {\n            medications: _this3.state.medications,\n            addMedication: _this3.addMedication,\n            deleteMedication: _this3.deleteMedication,\n            getAll: _this3.getAllMedications,\n            editMedication: _this3.editMedication,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/medications/new\",\n        render: function render(props) {\n          return React.createElement(NewMedicationForm, Object.assign({}, props, {\n            medications: _this3.state.medications,\n            addMedication: _this3.addMedication,\n            getAll: _this3.getAllMedications,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/meds/editmedication/:id\",\n        render: function render(props) {\n          return React.createElement(EditMedicationForm, Object.assign({}, props, {\n            medications: _this3.state.medications,\n            editMedication: _this3.editMedication,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ApplicationViews;\n}(Component);\n\nexport { ApplicationViews as default };","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/components/ApplicationViews.js"],"names":["React","Component","NavBar","Route","SymptomList","Login","Register","DataManager","Homepage","NewSymptomForm","MedicationList","NewMedicationForm","EditMedicationForm","ApplicationViews","state","users","symptoms","medications","appointments","notes","doctors","isAuthenticated","sessionStorage","getItem","addSymptom","newSymptom","postSymptom","then","getAll","allSymptoms","setState","deleteSymptom","id","delete","addMedication","newMedication","postMedicaton","allMedications","deleteMedication","editMedication","newMedicationObject","putMedication","allMedication","newState","allUsers","sortedMeds","sort","allAppointments","allNotes","allDoctors","console","log","username","password","getUsers","newUser","postUser","email","checkForUser","props","showNav","getAllSymptoms","getAllMedications"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,WAAP,MAAwB,wBAAxB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;;IAEqBC,gB;;;;;;;;;;;;;;;;;UAGjBC,K,GAAQ;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,QAAQ,EAAE,EAFN;AAGJC,MAAAA,WAAW,EAAE,EAHT;AAIJC,MAAAA,YAAY,EAAE,EAJV;AAKJC,MAAAA,KAAK,EAAE,EALH;AAMJC,MAAAA,OAAO,EAAE;AANL,K;;UA4BRC,e,GAAkB;AAAA,aAAMC,cAAc,CAACC,OAAf,CAAuB,MAAvB,MAAmC,IAAzC;AAAA,K;;UAqBlBC,U,GAAa,UAACC,UAAD,EAAgB;AACzB,aAAOlB,WAAW,CAACmB,WAAZ,CAAwBD,UAAxB,EAAoCE,IAApC,CAAyC,YAAM;AAClDpB,QAAAA,WAAW,CAACqB,MAAZ,CAAmB,UAAnB,EACKD,IADL,CACU,UAAAE,WAAW;AAAA,iBACb,MAAKC,QAAL,CAAc;AACVd,YAAAA,QAAQ,EAAEa;AADA,WAAd,CADa;AAAA,SADrB;AAMH,OAPM,CAAP;AAQH,K;;UACDE,a,GAAgB,UAAAC,EAAE,EAAI;AAClB,aAAOzB,WAAW,CAAC0B,MAAZ,CAAmBD,EAAnB,EAAuB,UAAvB,EAAmCL,IAAnC,CAAwC,YAAM;AACjDpB,QAAAA,WAAW,CAACqB,MAAZ,CAAmB,UAAnB,EACKD,IADL,CACU,UAAAE,WAAW,EAAI;AACjB,gBAAKC,QAAL,CAAc;AACVd,YAAAA,QAAQ,EAAEa;AADA,WAAd;AAIH,SANL;AAOH,OARM,CAAP;AASH,K;;UAQDK,a,GAAgB,UAACC,aAAD,EAAmB;AAC/B,aAAO5B,WAAW,CAAC6B,aAAZ,CAA0BD,aAA1B,EAAyCR,IAAzC,CAA8C,YAAM;AACvDpB,QAAAA,WAAW,CAACqB,MAAZ,CAAmB,aAAnB,EACKD,IADL,CACU,UAAAU,cAAc;AAAA,iBAAI,MAAKP,QAAL,CAAc;AAClCb,YAAAA,WAAW,EAAEoB;AADqB,WAAd,CAAJ;AAAA,SADxB;AAIH,OALM,CAAP;AAMH,K;;UAEDC,gB,GAAmB,UAAAN,EAAE,EAAI;AACrB,aAAOzB,WAAW,CAAC0B,MAAZ,CAAmBD,EAAnB,EAAuB,aAAvB,EAAsCL,IAAtC,CAA2C,YAAM;AACpDpB,QAAAA,WAAW,CAACqB,MAAZ,CAAmB,aAAnB,EACKD,IADL,CACU,UAAAU,cAAc,EAAI;AACpB,gBAAKP,QAAL,CAAc;AACVb,YAAAA,WAAW,EAAEoB;AADH,WAAd;AAGH,SALL;AAMH,OAPM,CAAP;AAQH,K;;UACDE,c,GAAiB,UAACP,EAAD,EAAKQ,mBAAL,EAA6B;AAC1C,aAAOjC,WAAW,CAACkC,aAAZ,CAA0BT,EAA1B,EAA8BQ,mBAA9B,EAAmDb,IAAnD,CAAwD,YAAM;AACjEpB,QAAAA,WAAW,CAACqB,MAAZ,CAAmB,aAAnB,EAAkCD,IAAlC,CAAuC,UAAAe,aAAa;AAAA,iBAAI,MAAKZ,QAAL,CAAc;AAClEb,YAAAA,WAAW,EAAEyB;AADqD,WAAd,CAAJ;AAAA,SAApD;AAGH,OAJM,CAAP;AAKH,K;;;;;;;wCA5FmB;AAAA;;AAChB,UAAMC,QAAQ,GAAG,EAAjB;AACApC,MAAAA,WAAW,CAACqB,MAAZ,CAAmB,OAAnB,EAA4BD,IAA5B,CAAiC,UAAAiB,QAAQ;AAAA,eAAID,QAAQ,CAAC5B,KAAT,GAAiB6B,QAArB;AAAA,OAAzC,EACKjB,IADL,CACU;AAAA,eAAMpB,WAAW,CAACqB,MAAZ,CAAmB,UAAnB,CAAN;AAAA,OADV,EACgDD,IADhD,CACqD,UAAAE,WAAW;AAAA,eAAIc,QAAQ,CAAC3B,QAAT,GAAoBa,WAAxB;AAAA,OADhE,EAEKF,IAFL,CAEU;AAAA,eAAMpB,WAAW,CAACqB,MAAZ,CAAmB,aAAnB,CAAN;AAAA,OAFV,EAEmDD,IAFnD,CAEwD,UAAAU,cAAc,EAAG;AACjE,YAAIQ,UAAU,GAAGR,cAAc,CAACS,IAAf,EAAjB;AACAH,QAAAA,QAAQ,CAAC1B,WAAT,GAAuB4B,UAAvB;AAAkC,OAJ1C,EAKKlB,IALL,CAKU;AAAA,eAAMpB,WAAW,CAACqB,MAAZ,CAAmB,cAAnB,CAAN;AAAA,OALV,EAKoDD,IALpD,CAKyD,UAAAoB,eAAe;AAAA,eAAIJ,QAAQ,CAACzB,YAAT,GAAwB6B,eAA5B;AAAA,OALxE,EAMKpB,IANL,CAMU;AAAA,eAAMpB,WAAW,CAACqB,MAAZ,CAAmB,OAAnB,CAAN;AAAA,OANV,EAM6CD,IAN7C,CAMkD,UAAAqB,QAAQ;AAAA,eAAIL,QAAQ,CAACxB,KAAT,GAAiB6B,QAArB;AAAA,OAN1D,EAOKrB,IAPL,CAOU;AAAA,eAAMpB,WAAW,CAACqB,MAAZ,CAAmB,SAAnB,CAAN;AAAA,OAPV,EAO+CD,IAP/C,CAOoD,UAAAsB,UAAU;AAAA,eAAIN,QAAQ,CAACvB,OAAT,GAAmB6B,UAAvB;AAAA,OAP9D,EAQKtB,IARL,CAQU;AAAA,eAAM,MAAI,CAACG,QAAL,CAAca,QAAd,CAAN;AAAA,OARV,EASKhB,IATL,CASU,YAAM;AAAEuB,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,MAAI,CAACrC,KAAvC;AAA+C,OATjE;AAUH,K,CAKD;;;;8BAEU;AACN,UAAI,KAAKO,eAAL,EAAJ,EAA4B;AACxB,eAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AACJ,K,CAED;;;;iCACa+B,Q,EAAUC,Q,EAAU;AAC7B9C,MAAAA,WAAW,CAAC+C,QAAZ,CAAqBF,QAArB,EAA+BC,QAA/B;AACH;;;+BACU;AACP,aAAO9C,WAAW,CAACqB,MAAZ,CAAmB,OAAnB,CAAP;AACH;;;6BACQ2B,O,EAAS;AACd,aAAOhD,WAAW,CAACiD,QAAZ,CAAqBD,OAArB,EAA8B5B,IAA9B,CAAmC;AAAA,eAAMpB,WAAW,CAACqB,MAAZ,CAAmB,OAAnB,CAAN;AAAA,OAAnC,CAAP;AACH;;;iCACY6B,K,EAAOJ,Q,EAAU;AAC1B,aAAO9C,WAAW,CAACmD,YAAZ,CAAyBD,KAAzB,EAAgCJ,QAAhC,CAAP;AACH,K,CACD;;;;qCAsBiB;AACb9C,MAAAA,WAAW,CAACqB,MAAZ,CAAmB,UAAnB;AACH,K,CACD;;;;wCACoB;AAChBrB,MAAAA,WAAW,CAACqB,MAAZ,CAAmB,aAAnB;AACH;;;6BA2BQ;AAAA;;AACL,aACI,0CACI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,MAAM,EAAE,gBAAC+B,KAAD,EAAW;AACrC,iBAAO,oBAAC,KAAD,oBAAWA,KAAX;AAAkB,YAAA,YAAY,EAAE,MAAI,CAACD,YAArC;AAAmD,YAAA,KAAK,EAAE,MAAI,CAAC5C,KAAL,CAAWC,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH,SAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAIK,KAAK6C,OAAL,EAJL,EAKI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,WAAlB;AAA8B,QAAA,MAAM,EAAE,gBAACD,KAAD,EAAW;AAC7C,iBAAO,oBAAC,QAAD,oBAAcA,KAAd;AAAqB,YAAA,QAAQ,EAAE,MAAI,CAACL,QAApC;AACH,YAAA,QAAQ,EAAE,MAAI,CAACE,QADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AAEH,SAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EASI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,OAAlB;AAA0B,QAAA,MAAM,EAAE,gBAACG,KAAD,EAAW;AACzC,iBAAO,oBAAC,QAAD,oBAAcA,KAAd;AAAqB,YAAA,KAAK,EAAE,MAAI,CAAC7C,KAAL,CAAWC,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH,SAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,EAYI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,QAAlB;AAA2B,QAAA,MAAM,EAAE,gBAAC4C,KAAD,EAAW;AAC1C,iBAAO,oBAAC,WAAD,oBAAiBA,KAAjB;AAAwB,YAAA,QAAQ,EAAE,MAAI,CAAC7C,KAAL,CAAWE,QAA7C;AAAuD,YAAA,UAAU,EAAE,MAAI,CAACQ,UAAxE;AAAoF,YAAA,aAAa,EAAE,MAAI,CAACO,aAAxG;AAAuH,YAAA,MAAM,EAAE,MAAI,CAAC8B,cAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH,SAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZJ,EAeI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,eAAlB;AAAkC,QAAA,MAAM,EAAE,gBAAAF,KAAK,EAAI;AAC/C,iBAAO,oBAAC,cAAD,oBAAoBA,KAApB;AAA2B,YAAA,QAAQ,EAAE,MAAI,CAAC7C,KAAL,CAAWE,QAAhD;AAA0D,YAAA,UAAU,EAAE,MAAI,CAACQ,UAA3E;AAAuF,YAAA,MAAM,EAAE,MAAI,CAACqC,cAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH,SAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfJ,EAkBI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,OAAlB;AAA0B,QAAA,MAAM,EAAE,gBAAAF,KAAK,EAAI;AACvC,iBAAO,oBAAC,cAAD,oBAAoBA,KAApB;AAA2B,YAAA,WAAW,EAAE,MAAI,CAAC7C,KAAL,CAAWG,WAAnD;AAAgE,YAAA,aAAa,EAAE,MAAI,CAACiB,aAApF;AAAmG,YAAA,gBAAgB,EAAE,MAAI,CAACI,gBAA1H;AAA4I,YAAA,MAAM,EAAE,MAAI,CAACwB,iBAAzJ;AAA4K,YAAA,cAAc,EAAE,MAAI,CAACvB,cAAjM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH,SAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBJ,EAqBM,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,kBAAlB;AAAqC,QAAA,MAAM,EAAE,gBAAAoB,KAAK,EAAI;AACpD,iBAAO,oBAAC,iBAAD,oBAAuBA,KAAvB;AAA8B,YAAA,WAAW,EAAE,MAAI,CAAC7C,KAAL,CAAWG,WAAtD;AAAmE,YAAA,aAAa,EAAE,MAAI,CAACiB,aAAvF;AAAsG,YAAA,MAAM,EAAE,MAAI,CAAC4B,iBAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH,SAFC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBN,EAwBI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,0BAAZ;AAAuC,QAAA,MAAM,EAAE,gBAACH,KAAD,EAAW;AAC1D,iBAAO,oBAAC,kBAAD,oBAAwBA,KAAxB;AAA+B,YAAA,WAAW,EAAE,MAAI,CAAC7C,KAAL,CAAWG,WAAvD;AAAoE,YAAA,cAAc,EAAE,MAAI,CAACsB,cAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AAAmH,SADnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxBJ,CADJ;AA6BH;;;;EAvIDtC,S;;SADiBY,gB","sourcesContent":["import React, { Component } from \"react\"\nimport NavBar from \"./nav/NavBar\"\nimport { Route } from \"react-router-dom\"\n// import { Redirect } from \"react-router-dom\"\nimport SymptomList from \"./symptoms/SymptomList\"\nimport Login from \"./login/Login\"\nimport Register from \"./login/Register\"\nimport DataManager from \"../modules/DataManager\"\n// import TrackNavBar from \"./nav/TrackNavBar\"\nimport Homepage from \"./homepage/Homepage\"\nimport NewSymptomForm from \"./symptoms/NewSymptomForm\"\nimport MedicationList from \"./medications/MedicationList\"\nimport NewMedicationForm from \"./medications/NewMedicationForm\"\nimport EditMedicationForm from \"./medications/EditMedicationForm\"\n\nexport default class ApplicationViews extends\n    Component {\n\n    state = {\n        users: [],\n        symptoms: [],\n        medications: [],\n        appointments: [],\n        notes: [],\n        doctors: []\n\n    }\n\n    componentDidMount() {\n        const newState = {}\n        DataManager.getAll(\"users\").then(allUsers => newState.users = allUsers)\n            .then(() => DataManager.getAll(\"symptoms\")).then(allSymptoms => newState.symptoms = allSymptoms)\n            .then(() => DataManager.getAll(\"medications\")).then(allMedications =>{\n                let sortedMeds = allMedications.sort()\n                newState.medications = sortedMeds})\n            .then(() => DataManager.getAll(\"appointments\")).then(allAppointments => newState.appointments = allAppointments)\n            .then(() => DataManager.getAll(\"notes\")).then(allNotes => newState.notes = allNotes)\n            .then(() => DataManager.getAll(\"doctors\")).then(allDoctors => newState.doctors = allDoctors)\n            .then(() => this.setState(newState))\n            .then(() => { console.log(\"COMPONENTDIDMOUNT:\", this.state) })\n    }\n\n\n\n\n    //authentication\n    isAuthenticated = () => sessionStorage.getItem(\"User\") !== null\n    showNav() {\n        if (this.isAuthenticated()) {\n            return <NavBar />\n        }\n    }\n\n    //login/registration\n    registerUser(username, password) {\n        DataManager.getUsers(username, password)\n    }\n    getUsers() {\n        return DataManager.getAll(\"users\")\n    }\n    postUser(newUser) {\n        return DataManager.postUser(newUser).then(() => DataManager.getAll(\"users\"))\n    }\n    checkForUser(email, password) {\n        return DataManager.checkForUser(email, password)\n    }\n    //symptoms\n    addSymptom = (newSymptom) => {\n        return DataManager.postSymptom(newSymptom).then(() => {\n            DataManager.getAll(\"symptoms\")\n                .then(allSymptoms =>\n                    this.setState({\n                        symptoms: allSymptoms\n                    })\n                );\n        })\n    }\n    deleteSymptom = id => {\n        return DataManager.delete(id, \"symptoms\").then(() => {\n            DataManager.getAll(\"symptoms\")\n                .then(allSymptoms => {\n                    this.setState({\n                        symptoms: allSymptoms\n                    })\n\n                })\n        })\n    }\n    getAllSymptoms() {\n        DataManager.getAll(\"symptoms\")\n    }\n    //medications\n    getAllMedications() {\n        DataManager.getAll(\"medications\")\n    }\n    addMedication = (newMedication) => {\n        return DataManager.postMedicaton(newMedication).then(() => {\n            DataManager.getAll(\"medications\")\n                .then(allMedications => this.setState({\n                    medications: allMedications\n                }))\n        })\n    }\n\n    deleteMedication = id => {\n        return DataManager.delete(id, \"medications\").then(() => {\n            DataManager.getAll(\"medications\")\n                .then(allMedications => {\n                    this.setState({\n                        medications: allMedications\n                    })\n                })\n        })\n    }\n    editMedication = (id, newMedicationObject) => {\n        return DataManager.putMedication(id, newMedicationObject).then(() => {\n            DataManager.getAll(\"medications\").then(allMedication => this.setState({\n                medications: allMedication\n            }))\n        })\n    }\n    render() {\n        return (\n            <>\n                <Route exact path=\"/\" render={(props) => {\n                    return <Login {...props} checkForUser={this.checkForUser} users={this.state.users} />\n                }} />\n                {this.showNav()}\n                <Route exact path=\"/register\" render={(props) => {\n                    return <Register {...props} getUsers={this.getUsers}\n                        postUser={this.postUser} />\n                }} />\n                <Route exact path=\"/home\" render={(props) => {\n                    return <Homepage {...props} users={this.state.users} />\n                }} />\n                <Route exact path=\"/track\" render={(props) => {\n                    return <SymptomList {...props} symptoms={this.state.symptoms} addSymptom={this.addSymptom} deleteSymptom={this.deleteSymptom} getAll={this.getAllSymptoms} />\n                }} />\n                <Route exact path=\"/symptoms/new\" render={props => {\n                    return <NewSymptomForm {...props} symptoms={this.state.symptoms} addSymptom={this.addSymptom} getAll={this.getAllSymptoms} />\n                }} />\n                <Route exact path=\"/meds\" render={props => {\n                    return <MedicationList {...props} medications={this.state.medications} addMedication={this.addMedication} deleteMedication={this.deleteMedication} getAll={this.getAllMedications} editMedication={this.editMedication} />\n                }} />\n                  <Route exact path=\"/medications/new\" render={props => {\n                    return <NewMedicationForm {...props} medications={this.state.medications} addMedication={this.addMedication} getAll={this.getAllMedications} />\n                }} />\n                <Route path=\"/meds/editmedication/:id\" render={(props) => {\n                return <EditMedicationForm {...props} medications={this.state.medications} editMedication={this.editMedication}/> }}/>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}