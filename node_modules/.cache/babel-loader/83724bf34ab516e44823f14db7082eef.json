{"ast":null,"code":"import _classCallCheck from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asiacarter/workspace/checkup/src/components/symptoms/SymptomList.js\";\n//component lists are symptoms added in the database that is associated with the logged in user\nimport React, { Component } from \"react\";\nimport SymptomCard from \"./SymptomCard\";\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nvar SymptomList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SymptomList, _Component);\n\n  function SymptomList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SymptomList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SymptomList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dropdownOpen: false,\n      sortDate: false,\n      sortName: false\n    };\n\n    _this.getAllTrackedSymptoms = function () {\n      _this.props.getAll().then(function () {\n        _this.props.history.push(\"/track\");\n      });\n    };\n\n    _this.toggle = function () {\n      _this.setState(function (prevState) {\n        return {\n          dropdownOpen: !prevState.dropdownOpen\n        };\n      });\n    };\n\n    _this.sortByDateChange = function () {\n      _this.setState(function () {\n        return {\n          sortDate: true,\n          sortName: false\n        };\n      });\n    };\n\n    _this.sortByNameChange = function () {\n      _this.setState(function () {\n        return {\n          sortDate: false,\n          sortName: true\n        };\n      });\n    };\n\n    _this.sortByName = function () {\n      var sortedSymps = _this.props.symptoms.sort(function (sympA, sympB) {\n        return sympA.name.localeCompare(sympB.name);\n      });\n\n      return React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, sortedSymps.map(function (symptom) {\n        return React.createElement(SymptomCard, Object.assign({\n          key: symptom.id,\n          symptom: symptom\n        }, _this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }));\n      }));\n    };\n\n    _this.sortByDate = function () {\n      var sortedSymps = _this.props.symptoms.sort(function (sympA, sympB) {\n        return new Date(sympB.date) - new Date(sympA.date);\n      });\n\n      return React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, sortedSymps.map(function (symptom) {\n        return React.createElement(SymptomCard, Object.assign({\n          key: symptom.id,\n          symptom: symptom\n        }, _this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }));\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(SymptomList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state);\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Symptom List\"), React.createElement(\"div\", {\n        className: \"symptomList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: this.getAllTrackedSymptoms,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Add\"), React.createElement(Dropdown, {\n        isOpen: this.state.dropdownOpen,\n        toggle: this.toggle,\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(DropdownToggle, {\n        className: \"symptom-dropdown\",\n        caret: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Sort\"), React.createElement(DropdownMenu, {\n        right: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(DropdownItem, {\n        onClick: this.sortByDateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Sort by Date\"), React.createElement(DropdownItem, {\n        onClick: this.sortByNameChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Sort by Name\"))))), this.state.sortDate === true ? this.sortByDate() : this.state.sortName === true ? this.sortByName() : React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.props.symptoms.map(function (symptom) {\n        return React.createElement(SymptomCard, Object.assign({\n          key: symptom.id,\n          symptom: symptom\n        }, _this2.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return SymptomList;\n}(Component);\n\nexport { SymptomList as default };","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/components/symptoms/SymptomList.js"],"names":["React","Component","SymptomCard","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","SymptomList","state","dropdownOpen","sortDate","sortName","getAllTrackedSymptoms","props","getAll","then","history","push","toggle","setState","prevState","sortByDateChange","sortByNameChange","sortByName","sortedSymps","symptoms","sort","sympA","sympB","name","localeCompare","map","symptom","id","sortByDate","Date","date","console","log"],"mappings":"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","sourcesContent":["//component lists are symptoms added in the database that is associated with the logged in user\nimport React, { Component } from \"react\"\nimport SymptomCard from \"./SymptomCard\"\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nexport default class SymptomList extends Component {\n\n    state = {\n        dropdownOpen: false,\n        sortDate: false,\n        sortName: false\n    }\n\n    getAllTrackedSymptoms = () => {\n        this.props.getAll()\n        .then(()=> {\n            this.props.history.push(\"/track\")\n        })\n    }\n\n    toggle= ()=> {\n        this.setState(prevState => ({\n          dropdownOpen: !prevState.dropdownOpen\n        }));\n      }\n\n      sortByDateChange = () => {\n          this.setState(() => ({\n              sortDate: true,\n              sortName: false\n          }))\n        }\n\n        sortByNameChange = () => {\n            this.setState(() => ({\n                sortDate: false,\n                sortName: true\n            }))\n        }\n\n        sortByName = () => {\n            let sortedSymps = this.props.symptoms.sort(function (sympA, sympB) {\n                return (sympA.name.localeCompare(sympB.name))\n            })\n            return (\n                <section>\n                        {sortedSymps.map(symptom => (\n\n                            <SymptomCard key={symptom.id} symptom={symptom} {...this.props} />\n\n                        ))}\n                </section>\n\n            )\n\n        }\n\n        sortByDate = () => {\n        let sortedSymps = this.props.symptoms.sort(function (sympA, sympB) {\n            return new Date (sympB.date) - new Date(sympA.date)\n        })\n\n        return (\n            <section>\n                    {sortedSymps.map(symptom => (\n\n                        <SymptomCard key={symptom.id} symptom={symptom} {...this.props} />\n\n                    ))}\n            </section>\n\n        )\n      }\n\n    render() {\n        console.log(this.state)\n        return (\n            <>\n                <div>\n                    <h2>Symptom List</h2>\n                    <div className=\"symptomList\">\n                    <button type=\"submit\" onClick={this.getAllTrackedSymptoms} >\n                        Add\n                </button>\n                <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle} size=\"sm\">\n        <DropdownToggle className=\"symptom-dropdown\"caret>\n          Sort\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem onClick={this.sortByDateChange}>Sort by Date</DropdownItem>\n          <DropdownItem onClick={this.sortByNameChange}>Sort by Name</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      </div>\n                </div>\n\n                {this.state.sortDate === true ? this.sortByDate() : this.state.sortName === true ? this.sortByName() :\n                <section>\n                {this.props.symptoms.map(symptom => (\n\n                    <SymptomCard key={symptom.id} symptom={symptom} {...this.props} />\n\n                ))}\n            </section>\n\n                }\n\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}