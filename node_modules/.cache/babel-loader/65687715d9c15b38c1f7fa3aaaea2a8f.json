{"ast":null,"code":"import _classCallCheck from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asiacarter/workspace/checkup/src/components/symptoms/TrackChoice.js\";\nimport React, { Component } from \"react\";\nimport \"./Symptoms.css\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nvar TrackChoice =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TrackChoice, _Component);\n\n  function TrackChoice() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TrackChoice);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TrackChoice)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      symptoms: [],\n      modal: false\n    };\n\n    _this.toggle = function () {\n      _this.setState(function (prevState) {\n        return {\n          modal: !prevState.modal\n        };\n      });\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    _this.addSymptomToDatabase = function () {\n      _this.props.addTrackedSymptom();\n    };\n\n    _this.addSymptomSave = function () {\n      _this.props.history.push(\"/symptoms/\".concat(_this.state.symptoms, \"/new\"));\n\n      var user = Number(sessionStorage.getItem(\"User\"));\n      var newSymptomToAdd = {\n        name: _this.state.symptoms,\n        userId: user\n      };\n\n      _this.props.addTrackedSymptom(newSymptomToAdd);\n    };\n\n    _this.deleteSymptom = function (e) {\n      _this.props.deleteSymptom(e.target.parentNode.id);\n    };\n\n    _this.test = function () {\n      var sortedSymptom = _this.props.trackedSymptoms.filter(function (symptom) {\n        return symptom.userId === Number(sessionStorage.getItem(\"User\"));\n      });\n\n      var sorted = sortedSymptom.map(function (symptom) {\n        return React.createElement(\"div\", {\n          key: symptom.id,\n          className: \"list-group my-list-group right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          key: symptom.id,\n          className: \"list-group-item\",\n          id: symptom.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/symptoms/\".concat(symptom.name, \"/new\"),\n          id: \"track-link\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          className: \"nausea-h1\",\n          id: \"nausea\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, symptom.name)), React.createElement(\"button\", {\n          onClick: _this.deleteSymptom,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, \"Delete\")));\n      });\n      return sorted;\n    };\n\n    return _this;\n  }\n\n  _createClass(TrackChoice, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"nav\", {\n        className: \"navbar fixed-top navbar-light light-blue flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"nav nav-pulls nav-fill\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"TRACK\")))), React.createElement(\"div\", {\n        className: \"symptom-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"symptom-question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"What symptom would you like to track?\"), React.createElement(\"div\", {\n        className: \"symptom-name-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-group my-list-group right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-group-item\",\n        id: \"nausea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/symptoms/Nausea/new\",\n        id: \"track-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"nausea-h1\",\n        id: \"nausea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Nausea\"))), React.createElement(\"div\", {\n        className: \"list-group-item\",\n        id: \"Blood Pressure\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/symptoms/Blood Pressure/new\",\n        id: \"track-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"weight-h1\",\n        id: \"Blood Pressure\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Blood Pressure\"))), React.createElement(\"div\", {\n        className: \"list-group-item\",\n        id: \"pain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/symptoms/Pain/new\",\n        id: \"track-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"pain-h1\",\n        id: \"pain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Pain\"))), React.createElement(\"div\", {\n        className: \"list-group-item\",\n        id: \"mood\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/symptoms/Mood/new\",\n        id: \"track-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"pain-h1\",\n        id: \"mood\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Mood\"))), React.createElement(React.Fragment, null, this.test()), React.createElement(\"div\", {\n        className: \"list-group-item\",\n        id: \"add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"none\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \" \", this.props.buttonLabel, React.createElement(\"h1\", {\n        className: \"add-h1\",\n        id: \"add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"+\")), React.createElement(\"div\", {\n        className: \"centerModal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        isOpen: this.state.modal,\n        className: \"modal-sm\",\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"What symptom would you like to track?\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"symptom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Symptom\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"symptoms\",\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.addSymptomSave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Save\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Cancel\"))))))));\n    }\n  }]);\n\n  return TrackChoice;\n}(Component);\n\nexport { TrackChoice as default };","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/components/symptoms/TrackChoice.js"],"names":["React","Component","Link","Button","Modal","ModalHeader","ModalBody","ModalFooter","TrackChoice","state","symptoms","modal","toggle","setState","prevState","handleFieldChange","evt","stateToChange","target","id","value","addSymptomToDatabase","props","addTrackedSymptom","addSymptomSave","history","push","user","Number","sessionStorage","getItem","newSymptomToAdd","name","userId","deleteSymptom","e","parentNode","test","sortedSymptom","trackedSymptoms","filter","symptom","sorted","map","buttonLabel"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport \"./Symptoms.css\"\nimport { Link } from \"react-router-dom\"\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nexport default class TrackChoice extends Component {\n    state = {\n        symptoms: [],\n        modal: false\n    }\n\n    toggle = () => {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    }\n    handleFieldChange = evt => {\n        const stateToChange = {};\n        stateToChange[evt.target.id] = evt.target.value;\n        this.setState(stateToChange);\n\n    }\n\n    addSymptomToDatabase = () => {\n        this.props.addTrackedSymptom()\n    }\n\n    addSymptomSave = () => {\n        this.props.history.push(`/symptoms/${this.state.symptoms}/new`)\n        let user = Number(sessionStorage.getItem(\"User\"))\n        let newSymptomToAdd = {\n            name: this.state.symptoms,\n            userId: user\n        }\n        this.props.addTrackedSymptom(newSymptomToAdd)\n    }\n\n    deleteSymptom = (e) => {\n        this.props.deleteSymptom(e.target.parentNode.id)\n    }\n\n    test = () => {\n        let sortedSymptom = this.props.trackedSymptoms.filter(symptom => {\n            return (symptom.userId === Number(sessionStorage.getItem(\"User\")))\n        })\n        let sorted = sortedSymptom.map(symptom => {\n            return (\n                <div key={symptom.id} className=\"list-group my-list-group right\">\n                    <div key={symptom.id} className=\"list-group-item\" id={symptom.id}>\n                        <Link to={`/symptoms/${symptom.name}/new`} id=\"track-link\">\n                            <h1 className=\"nausea-h1\" id=\"nausea\">\n                                {symptom.name}\n                            </h1>\n                        </Link>\n                        <button onClick={this.deleteSymptom}>Delete</button>\n                    </div>\n                </div>\n            )\n        })\n        return sorted\n    }\n\n    render() {\n        return (\n            <>\n                <nav className=\"navbar fixed-top navbar-light light-blue flex-md-nowrap p-0 shadow\">\n                    <div className=\"container\">\n                        <ul className=\"nav nav-pulls nav-fill\">\n                            <li className=\"nav-item\">\n                                TRACK\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <div className=\"symptom-container\">\n                    <h5 className=\"symptom-question\">What symptom would you like to track?</h5>\n                    <div className=\"symptom-name-container\">\n                    </div>\n                </div>\n                <div className=\"container\">\n                    <div className=\"list-group my-list-group right\">\n                        <div className=\"list-group-item\" id=\"nausea\">\n                            <Link to={\"/symptoms/Nausea/new\"} id=\"track-link\">\n                                <h1 className=\"nausea-h1\" id=\"nausea\">\n                                    Nausea\n                                </h1>\n                            </Link>\n                        </div>\n                        <div className=\"list-group-item\" id=\"Blood Pressure\">\n                            <Link to={\"/symptoms/Blood Pressure/new\"} id=\"track-link\">\n                                <h1 className=\"weight-h1\" id=\"Blood Pressure\">\n                                    Blood Pressure\n                                </h1>\n                            </Link>\n                        </div>\n                        <div className=\"list-group-item\" id=\"pain\">\n                            <Link to={\"/symptoms/Pain/new\"} id=\"track-link\">\n                                <h1 className=\"pain-h1\" id=\"pain\">\n                                    Pain\n                                </h1>\n                            </Link>\n                        </div>\n                        <div className=\"list-group-item\" id=\"mood\">\n                            <Link to={\"/symptoms/Mood/new\"} id=\"track-link\">\n                                <h1 className=\"pain-h1\" id=\"mood\">\n                                    Mood\n                                </h1>\n                            </Link>\n                        </div>\n                        <>\n                            {this.test()}\n                        </>\n\n                        <div className=\"list-group-item\" id=\"add\">\n                            <Button color=\"none\" onClick={this.toggle}> {this.props.buttonLabel}\n                                <h1 className=\"add-h1\" id=\"add\">\n                                    +\n                            </h1>\n                            </Button>\n                            <div className=\"centerModal\">\n                                <Modal isOpen={this.state.modal} className=\"modal-sm\" toggle={this.toggle} >\n                                    <ModalHeader toggle={this.toggle}>What symptom would you like to track?</ModalHeader>\n                                    <ModalBody >\n                                        <div>\n                                            <label htmlFor=\"symptom\">Symptom</label>\n                                            <input type=\"text\" id=\"symptoms\" onChange={this.handleFieldChange} />\n                                        </div>\n                                    </ModalBody>\n                                    <ModalFooter>\n                                        <Button color=\"primary\" onClick={this.addSymptomSave}>Save</Button>{' '}\n                                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n                                    </ModalFooter>\n                                </Modal>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}