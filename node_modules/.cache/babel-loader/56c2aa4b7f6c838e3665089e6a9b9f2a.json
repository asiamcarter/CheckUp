{"ast":null,"code":"import _classCallCheck from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asiacarter/workspace/checkup/src/components/notes/NewNoteForm.js\";\nimport React, { Component } from \"react\";\nimport DataManager from \"../../modules/DataManager\";\nimport ReactMicRecord from \"react-mic-record\";\nimport * as firebase from \"firebase\";\n\nvar NewNoteForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewNoteForm, _Component);\n\n  function NewNoteForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewNoteForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewNoteForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      userId: \"\",\n      doctorId: \"\",\n      time: \"\",\n      date: \"\",\n      reason: \"\",\n      note: \"\",\n      timestamp: \"\",\n      audioDownloadURL: \"\",\n      photo: \"\",\n      record: false,\n      audio: \"\"\n    };\n\n    _this.startRecording = function () {\n      _this.setState({\n        record: true\n      });\n    };\n\n    _this.stopRecording = function () {\n      _this.setState({\n        record: false\n      });\n    };\n\n    _this.onStop = function (recordedBlob) {\n      console.log('recordedBlob is: ', recordedBlob); // this.setState({\n      //     audio: recordedBlob\n      // })\n\n      var file = recordedBlob.blob; //reference to the file location on firebase\n\n      var uploadedAudio = firebase.storage().ref(\"/audio/\" + recordedBlob.blobURL); //uploading the song\n\n      var task = uploadedAudio.put(file); //an open connection to the status of that upload\n\n      task.on('state_changed', function (snapshot) {\n        //getting the download url\n        task.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n          //setting the download url and file name to state\n          _this.setState({\n            audioDownloadURL: downloadURL\n          });\n        });\n      });\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n\n      console.log(evt.target, evt.target.value);\n    };\n\n    _this.addNewNote = function (evt) {\n      evt.preventDefault();\n      var newNoteObject = {\n        userId: _this.state.userId,\n        doctorId: _this.state.doctorId,\n        time: _this.state.time,\n        date: _this.state.date,\n        reason: _this.state.reason,\n        note: _this.state.note,\n        timestamp: new Date(),\n        uploadedFileName: _this.state.uploadedFileName,\n        audioDownloadURL: _this.state.audioDownloadURL,\n        photo: _this.state.photo\n      };\n\n      _this.props.editAppointment(_this.props.match.params.id, newNoteObject).then(function () {\n        return _this.props.history.push(\"/appointments\");\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(NewNoteForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      DataManager.getById(this.props.match.params.id, \"appointments\").then(function (appointment) {\n        _this2.setState({\n          userId: appointment.userId,\n          doctorId: appointment.doctorId,\n          time: appointment.time,\n          date: appointment.date,\n          reason: appointment.reason,\n          note: appointment.note,\n          timestamp: appointment.timestamp,\n          audio: appointment.audio,\n          photo: appointment.photo\n        });\n      });\n    }\n  }, {\n    key: \"onData\",\n    value: function onData(recordedBlob) {\n      console.log('chunk of real-time data is: ', recordedBlob);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log(\"NEW NOTE STATE:\", this.state);\n      return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"New Note\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Content\"), React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: this.addNewNote,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Add\"), React.createElement(\"input\", {\n        type: \"file\",\n        accept: \"audio/*\",\n        capture: true,\n        id: \"audio\",\n        onChange: function onChange(e) {\n          {\n            _this3.fileUploader(e);\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(ReactMicRecord, {\n        record: this.state.record,\n        className: \"sound-wave\",\n        onStop: this.onStop,\n        strokeColor: \"#000000\",\n        backgroundColor: \"#ffffff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.startRecording,\n        type: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Start\"), React.createElement(\"button\", {\n        onClick: this.stopRecording,\n        value: \"audio\",\n        type: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Stop\"), React.createElement(\"figure\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"figcaption\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Listen:\"), React.createElement(\"audio\", {\n        controls: true,\n        src: this.state.audioDownloadURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Your browser does not support the\", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"audio\"), \" element.\"))));\n    }\n  }]);\n\n  return NewNoteForm;\n}(Component); // fileUploader = (e) => {\n//     let file = e.target.files[0];\n//     //file name to save in database\n//     let fileName = file.name\n//     //reference to the file location on firebase\n//     let uploadedSong = firebase.storage().ref(file.name)\n//     //uploading the song\n//     let task = uploadedSong.put(file)\n//     //an open connection to the status of that upload\n//     task.on('state_changed', (snapshot) => {\n//       let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//       console.log('Upload is ' + progress + '% done');\n//       switch (snapshot.state) {\n//         case firebase.storage.TaskState.PAUSED:\n//           console.log('Upload is paused');\n//           break;\n//         case firebase.storage.TaskState.RUNNING:\n//           console.log('Upload is running');\n//           break;\n//       }\n//     }, (error) => {\n//       console.log(error)\n//     },\n//       () => {\n//         //getting the download url\n//         task.snapshot.ref.getDownloadURL().then((downloadURL) => {\n//           //setting the download url and file name to state\n//           this.setState({\n//             uploadedFileName: fileName,\n//            audioDownloadURL: downloadURL\n//           })\n//         })\n//       })\n//   };\n\n\nexport { NewNoteForm as default };","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/components/notes/NewNoteForm.js"],"names":["React","Component","DataManager","ReactMicRecord","firebase","NewNoteForm","state","userId","doctorId","time","date","reason","note","timestamp","audioDownloadURL","photo","record","audio","startRecording","setState","stopRecording","onStop","recordedBlob","console","log","file","blob","uploadedAudio","storage","ref","blobURL","task","put","on","snapshot","getDownloadURL","then","downloadURL","handleFieldChange","evt","stateToChange","target","id","value","addNewNote","preventDefault","newNoteObject","Date","uploadedFileName","props","editAppointment","match","params","history","push","getById","appointment","e","fileUploader"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport DataManager from \"../../modules/DataManager\"\nimport ReactMicRecord from \"react-mic-record\"\nimport * as firebase from \"firebase\"\n\n\nexport default class NewNoteForm extends Component {\n    state = {\n        userId: \"\",\n        doctorId: \"\",\n        time: \"\",\n        date: \"\",\n        reason: \"\",\n        note: \"\",\n        timestamp: \"\",\n        audioDownloadURL: \"\",\n        photo: \"\",\n        record: false,\n        audio: \"\"\n    }\n\n    componentDidMount() {\n        DataManager.getById(this.props.match.params.id, \"appointments\").then(appointment => {\n            this.setState({\n                userId: appointment.userId,\n                doctorId: appointment.doctorId,\n                time: appointment.time,\n                date: appointment.date,\n                reason: appointment.reason,\n                note: appointment.note,\n                timestamp: appointment.timestamp,\n                audio: appointment.audio,\n                photo: appointment.photo\n            })\n        })\n    }\n\n    startRecording = () => {\n        this.setState({\n            record: true\n        });\n    }\n\n    stopRecording = () => {\n        this.setState({\n            record: false\n        });\n    }\n\n    onData(recordedBlob) {\n        console.log('chunk of real-time data is: ', recordedBlob);\n    }\n\n    onStop = (recordedBlob) => {\n        console.log('recordedBlob is: ', recordedBlob);\n        // this.setState({\n        //     audio: recordedBlob\n        // })\n\n\n        let file = recordedBlob.blob\n        //reference to the file location on firebase\n        let uploadedAudio = firebase.storage().ref(\"/audio/\"+ recordedBlob.blobURL)\n        //uploading the song\n        let task = uploadedAudio.put(file)\n        //an open connection to the status of that upload\n        task.on('state_changed', (snapshot) => {\n            //getting the download url\n            task.snapshot.ref.getDownloadURL().then((downloadURL) => {\n              //setting the download url and file name to state\n              this.setState({\n               audioDownloadURL: downloadURL\n              })\n            })\n\n\n    })\n}\n\n\n\n    handleFieldChange = evt => {\n        const stateToChange = {};\n        stateToChange[evt.target.id] = evt.target.value;\n        this.setState(stateToChange);\n        console.log(evt.target, evt.target.value)\n\n    }\n\n    addNewNote = evt => {\n        evt.preventDefault();\n        const newNoteObject = {\n            userId: this.state.userId,\n            doctorId: this.state.doctorId,\n            time: this.state.time,\n            date: this.state.date,\n            reason: this.state.reason,\n            note: this.state.note,\n            timestamp: new Date(),\n            uploadedFileName: this.state.uploadedFileName,\n           audioDownloadURL: this.state.audioDownloadURL,\n            photo: this.state.photo\n        }\n        this.props.editAppointment(this.props.match.params.id, newNoteObject)\n            .then(() => this.props.history.push(\"/appointments\"))\n    }\n\n    render() {\n\n        console.log(\"NEW NOTE STATE:\", this.state)\n        return (\n            <>\n                    <h2>New Note</h2>\n                    <div>\n                        <label htmlFor=\"content\">Content</label>\n                        <input type=\"text\" required onChange={this.handleFieldChange} id=\"note\" />\n                        <button type=\"submit\" onClick={this.addNewNote} >Add</button>\n                        <input type=\"file\" accept=\"audio/*\" capture id=\"audio\"  onChange={(e)=> {\n                            {this.fileUploader(e)}\n\n                        }}/>\n                         <ReactMicRecord\n                            record={this.state.record}\n                            className=\"sound-wave\"\n                            onStop={this.onStop}\n                            strokeColor=\"#000000\"\n                            backgroundColor=\"#ffffff\" />\n                            <button onClick={this.startRecording} type=\"button\">Start</button>\n                        <button onClick={this.stopRecording} value=\"audio\" type=\"button\">Stop</button>\n                        <figure>\n                            <figcaption>Listen:</figcaption>\n                            <audio\n                                controls\n                                src={this.state.audioDownloadURL}>\n                                Your browser does not support the\n                                <code>audio</code> element.\n                            </audio>\n                        </figure>\n                    </div>\n                </>\n            )\n        }\n    }\n                                                                                                                // fileUploader = (e) => {\n                                                                                                                //     let file = e.target.files[0];\n                                                                                                                //     //file name to save in database\n                                                                                                                //     let fileName = file.name\n\n                                                                                                                //     //reference to the file location on firebase\n                                                                                                                //     let uploadedSong = firebase.storage().ref(file.name)\n                                                                                                                //     //uploading the song\n                                                                                                                //     let task = uploadedSong.put(file)\n                                                                                                                //     //an open connection to the status of that upload\n                                                                                                                //     task.on('state_changed', (snapshot) => {\n                                                                                                                //       let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                                                                                                                //       console.log('Upload is ' + progress + '% done');\n                                                                                                                //       switch (snapshot.state) {\n                                                                                                                //         case firebase.storage.TaskState.PAUSED:\n                                                                                                                //           console.log('Upload is paused');\n                                                                                                                //           break;\n                                                                                                                //         case firebase.storage.TaskState.RUNNING:\n                                                                                                                //           console.log('Upload is running');\n                                                                                                                //           break;\n                                                                                                                //       }\n                                                                                                                //     }, (error) => {\n                                                                                                                //       console.log(error)\n                                                                                                                //     },\n                                                                                                                //       () => {\n                                                                                                                //         //getting the download url\n                                                                                                                //         task.snapshot.ref.getDownloadURL().then((downloadURL) => {\n\n                                                                                                                //           //setting the download url and file name to state\n                                                                                                                //           this.setState({\n                                                                                                                //             uploadedFileName: fileName,\n                                                                                                                //            audioDownloadURL: downloadURL\n                                                                                                                //           })\n                                                                                                                //         })\n                                                                                                                //       })\n                                                                                                                //   };"]},"metadata":{},"sourceType":"module"}