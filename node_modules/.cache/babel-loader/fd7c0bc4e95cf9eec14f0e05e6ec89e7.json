{"ast":null,"code":"var remoteURL = \"http://localhost:5002\";\nexport default {\n  getAll: function getAll(endpoint) {\n    return fetch(\"\".concat(remoteURL, \"/\").concat(endpoint)).then(function (r) {\n      return r.json();\n    });\n  },\n  postUser: function postUser(newUser) {\n    return fetch(\"\".concat(remoteURL, \"/users\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newUser)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  postSymptom: function postSymptom(newSymptom) {\n    return fetch(\"\".concat(remoteURL, \"/symptoms\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newSymptom)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  checkForUser: function checkForUser(email, password) {\n    return fetch(\"\".concat(remoteURL, \"/users?email=\").concat(email, \"&password=\").concat(password)).then(function (r) {\n      return r.json();\n    });\n  },\n  delete: function _delete(id, dataset) {\n    return fetch(\"\".concat(remoteURL, \"/\").concat(dataset, \"/\").concat(id), {\n      method: \"DELETE\"\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  postMedicaton: function postMedicaton(newMedication) {\n    return fetch(\"\".concat(remoteURL, \"/medications\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newMedication)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  putMedication: function putMedication(id, newObject) {\n    return fetch(\"\".concat(remoteURL, \"/medications/\").concat(id), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newObject)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  getById: function getById(id, dataset) {\n    return fetch(\"\".concat(remoteURL, \"/\").concat(dataset, \"/\").concat(id)).then(function (r) {\n      return r.json();\n    });\n  },\n  postAppointment: function postAppointment(newAppointment) {\n    return fetch(\"\".concat(remoteURL, \"/appointments\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newAppointment)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  getAllAptNotes: function getAllAptNotes() {\n    return fetch(\"\".concat(remoteURL, \"/appointments/?_embed=notes\")).then(function (r) {\n      return r.json();\n    });\n  },\n  putAppointment: function putAppointment(id, newObject) {\n    return fetch(\"\".concat(remoteURL, \"/appointments/\").concat(id), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newObject)\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n  getAptDocNotes: function getAptDocNotes() {\n    return fetch(\"\".concat(remoteURL, \"/appointments/?_expand=doctor&_expand=note\")).then(function (r) {\n      return r.json();\n    });\n  },\n  postNewDoctor: function postNewDoctor(newDocotor) {\n    return fetch(\"\".concat(remoteURL, \"/doctors\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newDocotor)\n    }).then(function (r) {\n      return r.json();\n    });\n  }\n};","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/modules/DataManager.js"],"names":["remoteURL","getAll","endpoint","fetch","then","r","json","postUser","newUser","method","headers","body","JSON","stringify","postSymptom","newSymptom","checkForUser","email","password","delete","id","dataset","postMedicaton","newMedication","putMedication","newObject","getById","postAppointment","newAppointment","getAllAptNotes","putAppointment","getAptDocNotes","postNewDoctor","newDocotor"],"mappings":"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","sourcesContent":["const remoteURL = \"http://localhost:5002\"\n\nexport default {\n    getAll(endpoint) {\n        return fetch(`${remoteURL}/${endpoint}`).then(r => r.json())\n\n    },\n\n    postUser(newUser) {\n        return fetch(`${remoteURL}/users`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newUser)\n        }).then(r => r.json())\n    },\n    postSymptom(newSymptom) {\n        return fetch(`${remoteURL}/symptoms`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newSymptom)\n        }).then(r => r.json())\n\n    },\n\n    checkForUser(email, password) {\n        return fetch(`${remoteURL}/users?email=${email}&password=${password}`).then(r => r.json())\n    },\n\n    delete(id, dataset) {\n        return fetch (`${remoteURL}/${dataset}/${id}`, {\n            method: \"DELETE\"}).then(r => r.json())\n    },\n\n    postMedicaton(newMedication) {\n        return fetch(`${remoteURL}/medications`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newMedication)\n        }).then(r => r.json())\n\n    },\n\n    putMedication(id, newObject) {\n        return fetch (`${remoteURL}/medications/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newObject)\n        }).then(r => r.json())\n    },\n\n    getById(id, dataset) {\n        return fetch(`${remoteURL}/${dataset}/${id}`).then(r => r.json())\n    },\n\n    postAppointment(newAppointment) {\n        return fetch(`${remoteURL}/appointments`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newAppointment)\n        }).then(r => r.json())\n    },\n    getAllAptNotes() {\n        return fetch(`${remoteURL}/appointments/?_embed=notes`).then(r =>r.json())\n    },\n\n    putAppointment(id, newObject) {\n        return fetch (`${remoteURL}/appointments/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newObject)\n        }).then(r => r.json())\n    },\n\n    getAptDocNotes() {\n        return fetch(`${remoteURL}/appointments/?_expand=doctor&_expand=note`).then(r =>r.json())\n    },\n\n    postNewDoctor(newDocotor) {\n        return fetch(`${remoteURL}/doctors`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newDocotor)\n        }).then(r => r.json())\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}