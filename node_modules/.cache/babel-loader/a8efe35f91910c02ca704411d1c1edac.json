{"ast":null,"code":"import _classCallCheck from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asiacarter/workspace/checkup/src/components/symptoms/SymptomList.js\";\n//component lists are symptoms added in the database that is associated with the logged in user\nimport React, { Component } from \"react\";\nimport SymptomCard from \"./SymptomCard\";\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nvar SymptomList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SymptomList, _Component);\n\n  function SymptomList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SymptomList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SymptomList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dropdownOpen: false\n    };\n\n    _this.getAllTrackedSymptoms = function () {\n      _this.props.getAll().then(function () {\n        _this.props.history.push(\"/track\");\n      });\n    };\n\n    _this.toggle = function () {\n      _this.setState(function (prevState) {\n        return {\n          dropdownOpen: !prevState.dropdownOpen\n        };\n      });\n    };\n\n    _this.sortByDate = function () {\n      var sortedSymps = _this.props.trackedSymptoms.sort(function (aptA, aptB) {\n        return new Date(aptA.date) - new Date(aptB.date);\n      });\n\n      return React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, _this.props.sortedSymps.map(function (symptom) {\n        return React.createElement(SymptomCard, Object.assign({\n          key: symptom.id,\n          symptom: symptom\n        }, _this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }));\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(SymptomList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"symptomList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Symptom List\"), React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: this.getAllTrackedSymptoms,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Add\"), React.createElement(Dropdown, {\n        isOpen: this.state.dropdownOpen,\n        toggle: this.toggle,\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(DropdownToggle, {\n        caret: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Sort\"), React.createElement(DropdownMenu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(DropdownItem, {\n        onClick: this.sortByDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Sort by Date\"), React.createElement(DropdownItem, {\n        onClick: function onClick() {\n          console.log(\"clicked!\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Sort by Name\")))), React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.props.symptoms.map(function (symptom) {\n        return React.createElement(SymptomCard, Object.assign({\n          key: symptom.id,\n          symptom: symptom\n        }, _this2.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return SymptomList;\n}(Component);\n\nexport { SymptomList as default };","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/components/symptoms/SymptomList.js"],"names":["React","Component","SymptomCard","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","SymptomList","state","dropdownOpen","getAllTrackedSymptoms","props","getAll","then","history","push","toggle","setState","prevState","sortByDate","sortedSymps","trackedSymptoms","sort","aptA","aptB","Date","date","map","symptom","id","console","log","symptoms"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,YAAnC,EAAiDC,YAAjD,QAAqE,YAArE;;IAEqBC,W;;;;;;;;;;;;;;;;;UAEjBC,K,GAAQ;AACJC,MAAAA,YAAY,EAAE;AADV,K;;UAIRC,qB,GAAwB,YAAM;AAC1B,YAAKC,KAAL,CAAWC,MAAX,GACCC,IADD,CACM,YAAK;AACP,cAAKF,KAAL,CAAWG,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH,OAHD;AAIH,K;;UAEDC,M,GAAQ,YAAK;AACT,YAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC1BT,UAAAA,YAAY,EAAE,CAACS,SAAS,CAACT;AADC,SAAL;AAAA,OAAvB;AAGD,K;;UAEDU,U,GAAa,YAAM;AACjB,UAAMC,WAAW,GAAG,MAAKT,KAAL,CAAWU,eAAX,CAA2BC,IAA3B,CAAgC,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACtE,eAAO,IAAIC,IAAJ,CAAUF,IAAI,CAACG,IAAf,IAAuB,IAAID,IAAJ,CAASD,IAAI,CAACE,IAAd,CAA9B;AACH,OAFmB,CAApB;;AAGA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACS,MAAKf,KAAL,CAAWS,WAAX,CAAuBO,GAAvB,CAA2B,UAAAC,OAAO;AAAA,eAE/B,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAEA,OAAO,CAACC,EAA1B;AAA8B,UAAA,OAAO,EAAED;AAAvC,WAAoD,MAAKjB,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAF+B;AAAA,OAAlC,CADT,CADJ;AASD,K;;;;;;;6BAEM;AAAA;;AAEL,aACI,0CACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKD,qBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,EAKA,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,KAAKF,KAAL,CAAWC,YAA7B;AAA2C,QAAA,MAAM,EAAE,KAAKO,MAAxD;AAAgE,QAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACR,oBAAC,cAAD;AAAgB,QAAA,KAAK,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADQ,EAIR,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAE,KAAKG,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAE,mBAAK;AAACW,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAAwB,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,CAJQ,CALA,CADJ,EAgBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKpB,KAAL,CAAWqB,QAAX,CAAoBL,GAApB,CAAwB,UAAAC,OAAO;AAAA,eAE5B,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAEA,OAAO,CAACC,EAA1B;AAA8B,UAAA,OAAO,EAAED;AAAvC,WAAoD,MAAI,CAACjB,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAF4B;AAAA,OAA/B,CADL,CAhBJ,CADJ;AA0BH;;;;EA9DoCV,S;;SAApBM,W","sourcesContent":["//component lists are symptoms added in the database that is associated with the logged in user\nimport React, { Component } from \"react\"\nimport SymptomCard from \"./SymptomCard\"\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nexport default class SymptomList extends Component {\n\n    state = {\n        dropdownOpen: false\n    }\n\n    getAllTrackedSymptoms = () => {\n        this.props.getAll()\n        .then(()=> {\n            this.props.history.push(\"/track\")\n        })\n    }\n\n    toggle= ()=> {\n        this.setState(prevState => ({\n          dropdownOpen: !prevState.dropdownOpen\n        }));\n      }\n\n      sortByDate = () => {\n        const sortedSymps = this.props.trackedSymptoms.sort(function (aptA, aptB) {\n            return new Date (aptA.date) - new Date(aptB.date)\n        })\n        return (\n            <section>\n                    {this.props.sortedSymps.map(symptom => (\n\n                        <SymptomCard key={symptom.id} symptom={symptom} {...this.props} />\n\n                    ))}\n            </section>\n        )\n      }\n\n    render() {\n\n        return (\n            <>\n                <div className=\"symptomList\">\n                    <h2>Symptom List</h2>\n                    <button type=\"submit\" onClick={this.getAllTrackedSymptoms} >\n                        Add\n                </button>\n                <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle} size=\"sm\">\n        <DropdownToggle caret>\n          Sort\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem onClick={this.sortByDate}>Sort by Date</DropdownItem>\n          <DropdownItem onClick={()=> {console.log(\"clicked!\")}}>Sort by Name</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n                </div>\n                <section>\n                    {this.props.symptoms.map(symptom => (\n\n                        <SymptomCard key={symptom.id} symptom={symptom} {...this.props} />\n\n                    ))}\n                </section>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}