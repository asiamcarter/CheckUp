{"ast":null,"code":"import _classCallCheck from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asiacarter/workspace/checkup/src/components/symptoms/NewSymptomForm.js\";\nimport React, { Component } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport \"./Symptoms.css\";\n\nvar NewSymptomForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewSymptomForm, _Component);\n\n  function NewSymptomForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewSymptomForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewSymptomForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: \"\",\n      intensity: \"\",\n      date: \"\",\n      time: \"\",\n      notes: \"\",\n      userId: \"\",\n      modal: false\n    };\n\n    _this.handleFieldChange2 = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.className] = evt.target.value;\n\n      _this.setState(stateToChange); // console.log(stateToChange)\n      // console.log(evt.target)\n\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange); // console.log(stateToChange)\n\n    };\n\n    _this.toggle = function () {\n      _this.setState(function (prevState) {\n        return {\n          modal: !prevState.modal\n        };\n      });\n    };\n\n    _this.addNewSymptom = function (evt) {\n      evt.preventDefault(); // let d = new Date();\n      // let day = d.getDate();\n      // let year = d.getFullYear();\n      // let month = (d.getMonth() + 1);\n      // let hours = (d.getHours()-12)\n      // let minutes = d.getMinutes()\n\n      var newSymptomObject = {\n        name: _this.props.match.params.symptomId,\n        intensity: _this.state.intensity,\n        date: _this.state.date,\n        notes: _this.state.notes,\n        userId: Number(sessionStorage.getItem(\"User\"))\n      };\n\n      _this.props.addSymptom(newSymptomObject).then(function () {\n        return _this.props.history.push(\"/trackedsymptoms\");\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(NewSymptomForm, [{\n    key: \"render\",\n    value: function render() {\n      var today = new Date().toISOString().substr(0, 10);\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \" Add New Symptom \"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.props.match.params.symptomId)), React.createElement(\"div\", {\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"intensity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Intensity\"), React.createElement(\"div\", {\n        className: \"rating\",\n        onChange: this.handleFieldChange2,\n        id: \"intensity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"rating\",\n        id: \"none\",\n        value: \"none\",\n        className: \"intensity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"none\",\n        className: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"None\"), React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"rating\",\n        id: \"mild\",\n        value: \"mild\",\n        className: \"intensity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"mild\",\n        className: \"mild\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Mild\"), React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"rating\",\n        id: \"med\",\n        value: \"med\",\n        className: \"intensity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"med\",\n        className: \"med\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Med\"), React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"rating\",\n        id: \"severe\",\n        value: \"severe\",\n        className: \"intensity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"severe\",\n        className: \"severe\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Severe\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"input\", {\n        type: \"date\",\n        value: today,\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"notes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Notes\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"notes\",\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      })), React.createElement(Button, {\n        color: \"danger\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, this.props.buttonLabel, \"Add\"), React.createElement(\"div\", {\n        className: \"centerModal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        isOpen: this.state.modal,\n        className: \"modal-sm modalSize\",\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"You're All Set!\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"We recommend that you check-in daily\"), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.addNewSymptom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Save\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return NewSymptomForm;\n}(Component);\n\nexport { NewSymptomForm as default };","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/components/symptoms/NewSymptomForm.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","ModalFooter","NewSymptomForm","state","name","intensity","date","time","notes","userId","modal","handleFieldChange2","evt","stateToChange","target","className","value","setState","handleFieldChange","id","toggle","prevState","addNewSymptom","preventDefault","newSymptomObject","props","match","params","symptomId","Number","sessionStorage","getItem","addSymptom","then","history","push","today","Date","toISOString","substr","buttonLabel"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport \"./Symptoms.css\"\nexport default class NewSymptomForm extends Component {\n    state = {\n        name: \"\",\n        intensity: \"\",\n        date: \"\",\n        time: \"\",\n        notes: \"\",\n        userId: \"\",\n        modal: false\n    }\n\n    handleFieldChange2 = evt => {\n        const stateToChange = {};\n        stateToChange[evt.target.className] = evt.target.value;\n        this.setState(stateToChange);\n        // console.log(stateToChange)\n        // console.log(evt.target)\n    }\n    handleFieldChange = evt => {\n        const stateToChange = {};\n        stateToChange[evt.target.id] = evt.target.value;\n        this.setState(stateToChange);\n        // console.log(stateToChange)\n\n    }\n\n    toggle= () => {\n        this.setState(prevState => ({\n          modal: !prevState.modal\n        }));\n      }\n\n    //    getDate = function() {\n    //         var now = new Date();\n    //         var month = (now.getMonth() + 1);\n    //         var day = now.getDate();\n    //         if (month < 10)\n    //             month = \"0\" + month;\n    //         if (day < 10)\n    //             day = \"0\" + day;\n    //         var today = now.getFullYear() + '/' + month + '/' + day;\n    //         console.log(today)\n    //     }\n\n    addNewSymptom = evt => {\n        evt.preventDefault();\n        // let d = new Date();\n        // let day = d.getDate();\n        // let year = d.getFullYear();\n        // let month = (d.getMonth() + 1);\n        // let hours = (d.getHours()-12)\n        // let minutes = d.getMinutes()\n        const newSymptomObject = {\n            name: this.props.match.params.symptomId,\n            intensity: this.state.intensity,\n            date: this.state.date,\n            notes: this.state.notes,\n            userId: Number(sessionStorage.getItem(\"User\"))\n        }\n        this.props.addSymptom(newSymptomObject)\n            .then(() => this.props.history.push(\"/trackedsymptoms\"))\n    }\n\n\n    render() {\n        let today = new Date().toISOString().substr(0, 10);\n        return (\n            <>\n                <form>\n                    <h2> Add New Symptom </h2>\n                    <div>\n                        <h4>{this.props.match.params.symptomId}</h4>\n                    </div>\n                    <div className=\"box\">\n                        <p className=\"intensity\">Intensity</p>\n                        <div className=\"rating\" onChange={this.handleFieldChange2} id=\"intensity\">\n\n                            <input type=\"radio\" name=\"rating\" id=\"none\" value=\"none\" className=\"intensity\" />\n                            <label htmlFor=\"none\" className=\"none\"\n                            >None\n                            </label>\n\n                            <input type=\"radio\" name=\"rating\" id=\"mild\" value=\"mild\" className=\"intensity\" />\n                            <label htmlFor=\"mild\" className=\"mild\">\n                            Mild\n                            </label>\n                            <input type=\"radio\" name=\"rating\" id=\"med\" value=\"med\" className=\"intensity\" />\n                            <label htmlFor=\"med\" className=\"med\">\n                            Med\n                            </label>\n                            <input type=\"radio\" name=\"rating\" id=\"severe\" value=\"severe\" className=\"intensity\" />\n                            <label htmlFor=\"severe\" className=\"severe\">\n                            Severe\n                            </label>\n\n                        </div>\n                    </div>\n                    <div>\n                        <label htmlFor=\"date\">Date</label>\n\n                        <input type=\"date\" value={today} required onChange={this.handleFieldChange} id=\"date\" />\n                    </div>\n                    <div>\n                        <label htmlFor=\"notes\">Notes</label>\n                        <input type=\"text\" id=\"notes\" onChange={this.handleFieldChange} />\n                    </div>\n                    <div>\n                    </div>\n\n        </form>\n        <Button color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}\n                Add\n        </Button>\n\n            <div className=\"centerModal\">\n                <Modal isOpen={this.state.modal} className=\"modal-sm modalSize\" toggle={this.toggle} >\n                <ModalHeader toggle={this.toggle}>You're All Set!</ModalHeader>\n                <ModalBody >\n                We recommend that you check-in daily\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"primary\" onClick={this.addNewSymptom}>Save</Button>{' '}\n                    <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n                </ModalFooter>\n                </Modal>\n        </div>\n\n\n\n                        {/* <button type=\"submit\" onClick={this.addNewSymptom} >\n                            Add</button> */}\n\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}