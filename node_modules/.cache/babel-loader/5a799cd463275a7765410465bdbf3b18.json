{"ast":null,"code":"import _classCallCheck from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asiacarter/workspace/checkup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asiacarter/workspace/checkup/src/components/symptoms/SymptomCard.js\";\n//Component builds cards for each symptom added to the symptom list\nimport React, { Component } from \"react\";\n\nvar SymptomCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SymptomCard, _Component);\n\n  function SymptomCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SymptomCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SymptomCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.showUsersSymptoms = function () {\n      if (_this.props.symptom.userId === Number(sessionStorage.getItem(\"User\"))) {\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          key: _this.props.symptom.id,\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          className: \"card-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, _this.props.symptom.name, React.createElement(\"button\", {\n          type: \"button\",\n          onClick: function onClick() {\n            return _this.props.deleteSymptom(_this.props.symptom.id);\n          },\n          className: \"card-link\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, \"Delete\")), React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, \"Intensity:\"), _this.props.symptom.intensity, React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, \"Date:\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, _this.props.symptom.date), React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, \"Time:\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, _this.props.symptom.time), React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, \"Notes:\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, _this.props.symptom.notes))));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SymptomCard, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, this.showUsersSymptoms());\n    }\n  }]);\n\n  return SymptomCard;\n}(Component);\n\nexport { SymptomCard as default };","map":{"version":3,"sources":["/Users/asiacarter/workspace/checkup/src/components/symptoms/SymptomCard.js"],"names":["React","Component","SymptomCard","showUsersSymptoms","props","symptom","userId","Number","sessionStorage","getItem","id","name","deleteSymptom","intensity","date","time","notes"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEqBC,W;;;;;;;;;;;;;;;;;;UAEjBC,iB,GAAoB,YAAM;AACtB,UAAI,MAAKC,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,KAA8BC,MAAM,CAACC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAD,CAAxC,EAA0E;AACtE,eACI,0CAEA;AAAK,UAAA,GAAG,EAAG,MAAKL,KAAL,CAAWC,OAAX,CAAmBK,EAA9B;AAAkC,UAAA,SAAS,EAAC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAI,UAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,MAAKN,KAAL,CAAWC,OAAX,CAAmBM,IADxB,EAEI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAKP,KAAL,CAAWQ,aAAX,CAAyB,MAAKR,KAAL,CAAWC,OAAX,CAAmBK,EAA5C,CAAN;AAAA,WAA/B;AACI,UAAA,SAAS,EAAC,WADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARJ,EASK,MAAKN,KAAL,CAAWC,OAAX,CAAmBQ,SATxB,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAVJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI,MAAKT,KAAL,CAAWC,OAAX,CAAmBS,IAAvB,CAXJ,EAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAZJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI,MAAKV,KAAL,CAAWC,OAAX,CAAmBU,IAAvB,CAbJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdJ,EAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI,MAAKX,KAAL,CAAWC,OAAX,CAAmBW,KAAvB,CAfJ,CADJ,CAFA,CADJ;AAyBH;AACJ,K;;;;;;;6BACQ;AACL,aACI,0CACC,KAAKb,iBAAL,EADD,CADJ;AAKH;;;;EArCoCF,S;;SAApBC,W","sourcesContent":["//Component builds cards for each symptom added to the symptom list\nimport React, { Component } from \"react\"\n\nexport default class SymptomCard extends Component {\n//function checks to see if logged in userid matches the sessionstorage id of the symptom and if it does, renders that symptom card to the DOM\n    showUsersSymptoms = () => {\n        if (this.props.symptom.userId === Number(sessionStorage.getItem(\"User\"))) {\n            return (\n                <>\n                {/* {console.log(\"SYMPTOMS:\",this.props)} */}\n                <div key= {this.props.symptom.id} className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">\n                            {this.props.symptom.name}\n                            <button type=\"button\" onClick={() => this.props.deleteSymptom(this.props.symptom.id)}\n                                className=\"card-link\" >\n                                Delete\n                        </button>\n                        </h5>\n                        <h6>Intensity:</h6>\n                        {this.props.symptom.intensity}\n                        <h6>Date:</h6>\n                        <p>{this.props.symptom.date}</p>\n                        <h6>Time:</h6>\n                        <p>{this.props.symptom.time}</p>\n                        <h6>Notes:</h6>\n                        <p>{this.props.symptom.notes}</p>\n                    </div>\n                </div>\n            </>\n\n            )\n        }\n    }\n    render() {\n        return (\n            <>\n            {this.showUsersSymptoms()}\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}